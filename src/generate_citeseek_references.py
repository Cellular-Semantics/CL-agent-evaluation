import os
import yaml
import argparse
import subprocess


def find_and_process_yamls(input_dir, output_dir):
    """
    Finds all '*_statements.yaml' files in an input directory, runs citeseek on each assertion,
    and saves the results to a separate file for each input in the output directory.
    """
    print(f"Searching for YAML files in: {os.path.abspath(input_dir)}")

    # Ensure the output directory exists.
    os.makedirs(output_dir, exist_ok=True)
    print(f"Results will be saved in: {os.path.abspath(output_dir)}")

    try:
        yaml_files = [
            f for f in os.listdir(input_dir) if f.endswith("_statements.yaml")
        ]
    except FileNotFoundError:
        print(f"Error: Input directory not found at '{os.path.abspath(input_dir)}'")
        print("Please run the 'generate_defs_and_references.py' script first.")
        return

    if not yaml_files:
        print("No '*_statements.yaml' files found in the input directory.")
        return

    print(f"Found {len(yaml_files)} files to process: {', '.join(yaml_files)}")

    # Iterate through each YAML file found.
    for filename in yaml_files:
        print(f"\n--- Processing file: {filename} ---")

        # Generate a unique output filename for each input file.
        # Example: "tendon_cell_statements.yaml" -> "tendon_cell_citeseek_results.txt"
        output_filename = filename.replace("_statements.yaml", "_citeseek_results.txt")
        output_filepath = os.path.join(output_dir, output_filename)

        # This creates a new, separate file for each cell type's results.
        with open(output_filepath, "w") as report_file:
            report_file.write(f"--- CiteSeek Results for {filename} ---\n\n")

            input_filepath = os.path.join(input_dir, filename)

            with open(input_filepath, "r") as yaml_file:
                data = yaml.safe_load(yaml_file)

            # Iterate through each assertion in the current YAML file.
            for key, assertion in data["label"].items():
                print(f"  > Running citeseek for '{key}'...")

                try:
                    command_list = [
                        "curategpt",
                        "citeseek",
                        "--model",
                        "gpt-4o",
                        assertion,
                    ]
                    process = subprocess.run(
                        command_list,
                        capture_output=True,
                        text=True,
                        check=False,  # Important: prevents crashing on errors
                    )
                    if process.returncode == 0:
                        result = process.stdout
                    else:
                        # If there was an error, we capture it instead of getting a blank result
                        result = f"ERROR executing citeseek:\n{process.stderr}"
                except FileNotFoundError:
                    result = "ERROR: 'curategpt' command not found in environment."

                report_file.write(f"--- Results for {key} ---\n")
                report_file.write(f"Assertion: {assertion}\n\n")
                report_file.write("CiteSeek Output:\n")
                report_file.write(result)
                report_file.write("\n\n")

        print(f"Results for {filename} saved to: {output_filepath}")

    print(f"\n--- All processing complete. ---")


if __name__ == "__main__":
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(script_dir)

    # Define the new dedicated directory path once.
    default_path = os.path.join(project_root, "output", "chatgpt_and_citeseek_output")

    parser = argparse.ArgumentParser(
        description="Finds citations for assertions in YAML files generated by the definition script."
    )
    parser.add_argument(
        "-i",
        "--input",
        dest="input_dir",
        default=default_path,
        help="Directory containing the '*_statements.yaml' files.",
    )
    parser.add_argument(
        "-o",
        "--output",
        dest="output_dir",
        default=default_path,
        help="Directory where the individual result files will be saved.",
    )
    args = parser.parse_args()

    find_and_process_yamls(args.input_dir, args.output_dir)
